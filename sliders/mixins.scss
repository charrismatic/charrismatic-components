


/*
 * @name keyframes
 * @description Mixin to to define animation keyframes
 *
 * @example
 *
 * @include keyframes(slide-down) {
 *   0% { opacity: 1; }
 *   90% { opacity: 0; }
 *  }
 *
 *  .element {
 *  width: 100px;
 *  height: 100px;
 *  background: black;
 *  @include animation('slide-down 5s 3');
 *  }
 */
// PREFIXED
@mixin keyframes_prefixed($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

// NON-PREFIXED
@mixin keyframes($animation_name) {
 @keyframes #{$animation_name} {
   @content;
 }
}



/**
 * https://www.sassmeister.com/gist/8458511
 * ----
 * Sass (v3.3.0.rc.2)
 * Compass (v1.0.0.alpha.17)
 * ----
 * Add vendor prefixes to keyframes
 * Usage: @include animation(block-1-animate, $speed, ease-out, infinite)
 *
 * @example
 * // DEFINE KEYFRAMES
 * @include keyframes(slide-down) {
 *    0% { opacity: 1; }
 *    90% { opacity: 0; }
 * }
 * // DECLARE ANIMATION
 * .element {
 *   width: 100px;
 *   height: 100px;
 *   background: black;
 *   @include animation('slide-down 5s 3');
 * }
 */
@mixin animation_prefixed ($animation, $duration, $transition, $iteration) {
  -webkit-animation-name: $animation;
  -webkit-animation-duration: $duration;
  -webkit-animation-timing-function: $transition;
  -webkit-animation-iteration-count: $iteration;

  -moz-animation-name: $animation;
  -moz-animation-duration: $duration;
  -moz-animation-timing-function: $transition;
  -moz-animation-iteration-count: $iteration;

  -o-animation-name: $animation;
  -o-animation-duration: $duration;
  -o-animation-timing-function: $transition;
  -o-animation-iteration-count: $iteration;

  animation-name: $animation;
  animation-duration: $duration;
  animation-timing-function: $transition;
  animation-iteration-count: $iteration;
}

@mixin animation($name, $duration, $transition, $iteration) {
  animation-name: $name;
  animation-duration: $duration;
  animation-timing-function: $transition;
  animation-iteration-count: $iteration;
}


/**
*  GOOGLE MATERIAL GUIDLINES FOR MOVEMENT AND MOTION:
*
*  @source: https://material.io/guidelines/motion/duration-easing.html
*
*  Entering the screen
*  Elements entering the screen use the deceleration curve for a speedy entrance,
*  indicating that they had been travelling at peak velocity.
*
*  Permanently leaving the screen
*  Elements permanently leaving the screen use the acceleration curve
*  to speed off-screen over a slightly shorter duration,
*  as they will not be returning and require less user focus.
*
*  Temporarily leaving the screen
*  Elements temporarily leaving the screen should use the sharp curve,
*  as they may return to the screen at any time and should appear nearby
*  and within reach.
*
*  Relative movement
*  Entering or exiting elements that move other on-screen elements do so
*  along a smooth easing curve, so that they remain minimally disruptive
*  and avoid eye-catching, dramatic movement.
*  The standard curve is used for moving elements both in and out of the
*  bounds of the screen. This curve has a slightly longer duration compared
*  to independent elements.
*/

// RECOMMENDED DURATIONS
$material_timing_mobile: 300ms;
$material_timing_mobile_enter: 225ms;
$material_timing_mobile_exit: 195ms;
$material_timing_tablet: 390ms;
$material_timing_desktop: 200ms;

// Google Material Standard Curve
// Ease in out
$material_standard: cubic-bezier(0.4, 0.0, 0.2, 1);

// Deceleration curve
$material_decel: cubic-bezier(0.0, 0.0, 0.2, 1);

// Acceleration curve
$material_accel: cubic-bezier(0.4, 0.0, 1, 1);

// Ease in out - for exiting elements
$material_sharp_exit: cubic-bezier(0.4, 0.0, 0.6, 1);

@mixin material_transition(
  $prop,
  $timing: $material_timing_mobile,
  $trans: $material_standard,
  $delay: 0ms ){
  transition: $prop $timing $trans $delay;
}



/**
* @mixin
* @name tranistion
* @description Include multiple transition with a single fu
* @example
* .class {
*   color: gray;
*   @include transition(color .3s ease);
*   &:hover {
*     color: black;
*   }
* }
**/
@mixin transition($args...) {
   transition: $args;
}

@function _trans($prop: all, $dur: 600, $trans: ease-in-out, $delay: 0) {
  @return #{$prop} #{$dur}ms #{$trans} #{$delay}ms;
}




@mixin max_width($width) {
  @media (max-width: #{$width}) {
    @content;
  }
}

@mixin min_width($width) {
  @media (min-width: #{$width}) {
    @content;
  }
}

@mixin range_width($min_width, $max_width) {
  @media (min-width: #{$min_width}) and (max-width: #{$max_width}) {
    @content;
  }
}


// Maintain ratio mixin. Great for responsive grids, or videos.
// https://gist.github.com/brianmcallister/2932463
// $ratio - Ratio the element needs to maintain.
// Examples
//
// A 16:9 ratio would look like this:
// .element {
//   @include maintain-ratio(16 9);
// }
@mixin maintain-ratio($ratio: 1 1) {
  // @if length($ratio) < 2 or length($ratio) > 2 {
  //   @warn "$ratio must be a list with two values.";
  // }

  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));

  width: $width;
  height: 0;
  padding-bottom: $height;
}

// https://css-tricks.com/snippets/sass/maintain-aspect-ratio-mixin/
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > * {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}






// SET FONT DEFAULTS
@mixin font_style($font_family, $font_wt, $font_color) {
  color: $font_color;
  font-family: $font_family;
  font-size: $font_size;
  font-weight: $font_wt;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

//
// @include font-face(proxima-nova, fonts/proxima-nova_400, 500, normal, eot woff2 woff);
//
// .tk-proxima-nova{
//   font-family:"proxima-nova",sans-serif;}
//
// @font-face{
//   font-family:tk-proxima-nova-n7;
//   src:url('/fonts/proxima-nova_700.woff2') format("woff2"), url('/fonts/proxima-nova_700.woff') format("woff"), url('/fonts/proxima-nova_700.otf') format("opentype");
//   font-weight:700;
//   font-style:normal;
// }
// @font-face{
//   font-family:tk-proxima-nova-n4;
//   src: url('/fonts/proxima-nova_400.woff2') format("woff2"), url('/fonts/proxima-nova_400.woff') format("woff"), url('/fonts/proxima-nova_400.otf') format("opentype");
//   font-weight:400;
//   font-style:normal;
// }


%font-base {
  @include font_style($font_plus, normal, $theme_font_color);
  display: block;
  line-height: 1.1;
  margin: 0;
  padding: 0.5rem 0;
}



$width_tablet_device_lg: 850px;
$width_tablet_device_sm: 660px;
$width_mobile_device_lg: 420px;
$width_mobile_device_sm: 360px;

$grid_tablet : 850px;
$grid_mobile : 625px;

// HOME PAGE
$banner_break_mid: 850px;
$banner_break_sm1: 560px;


@mixin max_width($width) {
  @media (max-width: #{$width}) {
    @content;
  }
}

@mixin min_width($width) {
  @media (min-width: #{$width}) {
    @content;
  }
}

@mixin range_width($min_width, $max_width) {
  @media (min-width: #{$min_width}) and (max-width: #{$max_width}) {
    @content;
  }
}


// Maintain ratio mixin. Great for responsive grids, or videos.
// https://gist.github.com/brianmcallister/2932463
// $ratio - Ratio the element needs to maintain.
// Examples
//
// A 16:9 ratio would look like this:
// .element {
//   @include maintain-ratio(16 9);
// }
@mixin maintain-ratio($ratio: 1 1) {
  // @if length($ratio) < 2 or length($ratio) > 2 {
  //   @warn "$ratio must be a list with two values.";
  // }

  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));

  width: $width;
  height: 0;
  padding-bottom: $height;
}

// https://css-tricks.com/snippets/sass/maintain-aspect-ratio-mixin/
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > * {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin list_c($list) {
  // example:
  // $buttonConfig: 'save' 50px, 'cancel' 50px, 'help' 100px;

  @each $tuple in $list {
    .button-#{nth($tuple, 1)} {
      width: nth($tuple, 2);
    }
  }
}


@mixin shadow($x: 4px, $y:5px, $blur:14px, $spread:0 ,$rgba: rgba(24, 24, 24, 0.4)) {
  box-shadow: $x $y $blur $spread $rgba;
}

@function imageUrl($base, $path) {
  @return url('#{$base}/#{$path}');
}
